{"version":3,"file":"component---src-templates-blog-post-jshead.js","mappings":"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","sources":["webpack://gatsby-starter-blog/./node_modules/camelcase/index.js","webpack://gatsby-starter-blog/../src/image-utils.ts","webpack://gatsby-starter-blog/../src/components/hooks.ts","webpack://gatsby-starter-blog/../src/components/placeholder.tsx","webpack://gatsby-starter-blog/../src/components/picture.tsx","webpack://gatsby-starter-blog/../src/components/main-image.tsx","webpack://gatsby-starter-blog/../src/components/layout-wrapper.tsx","webpack://gatsby-starter-blog/../src/components/gatsby-image.server.tsx","webpack://gatsby-starter-blog/../src/components/static-image.server.tsx","webpack://gatsby-starter-blog/./src/components/bio.js","webpack://gatsby-starter-blog/./src/components/layout.js","webpack://gatsby-starter-blog/./src/components/seo.js","webpack://gatsby-starter-blog/./src/templates/blog-post.js"],"sourcesContent":["'use strict';\n\nconst UPPERCASE = /[\\p{Lu}]/u;\nconst LOWERCASE = /[\\p{Ll}]/u;\nconst LEADING_CAPITAL = /^[\\p{Lu}](?![\\p{Lu}])/gu;\nconst IDENTIFIER = /([\\p{Alpha}\\p{N}_]|$)/u;\nconst SEPARATORS = /[_.\\- ]+/;\n\nconst LEADING_SEPARATORS = new RegExp('^' + SEPARATORS.source);\nconst SEPARATORS_AND_IDENTIFIER = new RegExp(SEPARATORS.source + IDENTIFIER.source, 'gu');\nconst NUMBERS_AND_IDENTIFIER = new RegExp('\\\\d+' + IDENTIFIER.source, 'gu');\n\nconst preserveCamelCase = (string, toLowerCase, toUpperCase) => {\n\tlet isLastCharLower = false;\n\tlet isLastCharUpper = false;\n\tlet isLastLastCharUpper = false;\n\n\tfor (let i = 0; i < string.length; i++) {\n\t\tconst character = string[i];\n\n\t\tif (isLastCharLower && UPPERCASE.test(character)) {\n\t\t\tstring = string.slice(0, i) + '-' + string.slice(i);\n\t\t\tisLastCharLower = false;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = true;\n\t\t\ti++;\n\t\t} else if (isLastCharUpper && isLastLastCharUpper && LOWERCASE.test(character)) {\n\t\t\tstring = string.slice(0, i - 1) + '-' + string.slice(i - 1);\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = false;\n\t\t\tisLastCharLower = true;\n\t\t} else {\n\t\t\tisLastCharLower = toLowerCase(character) === character && toUpperCase(character) !== character;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = toUpperCase(character) === character && toLowerCase(character) !== character;\n\t\t}\n\t}\n\n\treturn string;\n};\n\nconst preserveConsecutiveUppercase = (input, toLowerCase) => {\n\tLEADING_CAPITAL.lastIndex = 0;\n\n\treturn input.replace(LEADING_CAPITAL, m1 => toLowerCase(m1));\n};\n\nconst postProcess = (input, toUpperCase) => {\n\tSEPARATORS_AND_IDENTIFIER.lastIndex = 0;\n\tNUMBERS_AND_IDENTIFIER.lastIndex = 0;\n\n\treturn input.replace(SEPARATORS_AND_IDENTIFIER, (_, identifier) => toUpperCase(identifier))\n\t\t.replace(NUMBERS_AND_IDENTIFIER, m => toUpperCase(m));\n};\n\nconst camelCase = (input, options) => {\n\tif (!(typeof input === 'string' || Array.isArray(input))) {\n\t\tthrow new TypeError('Expected the input to be `string | string[]`');\n\t}\n\n\toptions = {\n\t\tpascalCase: false,\n\t\tpreserveConsecutiveUppercase: false,\n\t\t...options\n\t};\n\n\tif (Array.isArray(input)) {\n\t\tinput = input.map(x => x.trim())\n\t\t\t.filter(x => x.length)\n\t\t\t.join('-');\n\t} else {\n\t\tinput = input.trim();\n\t}\n\n\tif (input.length === 0) {\n\t\treturn '';\n\t}\n\n\tconst toLowerCase = options.locale === false ?\n\t\tstring => string.toLowerCase() :\n\t\tstring => string.toLocaleLowerCase(options.locale);\n\tconst toUpperCase = options.locale === false ?\n\t\tstring => string.toUpperCase() :\n\t\tstring => string.toLocaleUpperCase(options.locale);\n\n\tif (input.length === 1) {\n\t\treturn options.pascalCase ? toUpperCase(input) : toLowerCase(input);\n\t}\n\n\tconst hasUpperCase = input !== toLowerCase(input);\n\n\tif (hasUpperCase) {\n\t\tinput = preserveCamelCase(input, toLowerCase, toUpperCase);\n\t}\n\n\tinput = input.replace(LEADING_SEPARATORS, '');\n\n\tif (options.preserveConsecutiveUppercase) {\n\t\tinput = preserveConsecutiveUppercase(input, toLowerCase);\n\t} else {\n\t\tinput = toLowerCase(input);\n\t}\n\n\tif (options.pascalCase) {\n\t\tinput = toUpperCase(input.charAt(0)) + input.slice(1);\n\t}\n\n\treturn postProcess(input, toUpperCase);\n};\n\nmodule.exports = camelCase;\n// TODO: Remove this for the next major release\nmodule.exports.default = camelCase;\n","import camelCase from \"camelcase\"\nimport type { IGatsbyImageData } from \"./index\"\n\nconst DEFAULT_PIXEL_DENSITIES = [0.25, 0.5, 1, 2]\nexport const DEFAULT_BREAKPOINTS = [750, 1080, 1366, 1920]\nexport const EVERY_BREAKPOINT = [\n  320, 654, 768, 1024, 1366, 1600, 1920, 2048, 2560, 3440, 3840, 4096,\n]\nconst DEFAULT_FLUID_WIDTH = 800\nconst DEFAULT_FIXED_WIDTH = 800\nconst DEFAULT_ASPECT_RATIO = 4 / 3\n\nexport type Fit = \"cover\" | \"fill\" | \"inside\" | \"outside\" | \"contain\"\n\nexport type Layout = \"fixed\" | \"fullWidth\" | \"constrained\"\nexport type ImageFormat = \"jpg\" | \"png\" | \"webp\" | \"avif\" | \"auto\" | \"\"\n\n/**\n * The minimal required reporter, as we don't want to import it from gatsby-cli\n */\nexport interface IReporter {\n  warn(message: string): void\n}\n\nexport interface ISharpGatsbyImageArgs {\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  placeholder?: \"tracedSVG\" | \"dominantColor\" | \"blurred\" | \"none\"\n  tracedSVGOptions?: Record<string, unknown>\n  width?: number\n  height?: number\n  aspectRatio?: number\n  sizes?: string\n  quality?: number\n  transformOptions?: {\n    fit?: Fit\n    cropFocus?: number | string\n    duotone?: {\n      highlight: string\n      shadow: string\n      opacity?: number\n    }\n    grayscale?: boolean\n    rotate?: number\n    trim?: number\n  }\n  jpgOptions?: Record<string, unknown>\n  pngOptions?: Record<string, unknown>\n  webpOptions?: Record<string, unknown>\n  avifOptions?: Record<string, unknown>\n  blurredOptions?: { width?: number; toFormat?: ImageFormat }\n  breakpoints?: Array<number>\n  outputPixelDensities?: Array<number>\n  backgroundColor?: string\n}\n\nexport interface IImageSizeArgs {\n  width?: number\n  height?: number\n  layout?: Layout\n  filename: string\n  outputPixelDensities?: Array<number>\n  breakpoints?: Array<number>\n  fit?: Fit\n  reporter?: IReporter\n  sourceMetadata: { width: number; height: number }\n}\n\nexport interface IImageSizes {\n  sizes: Array<number>\n  presentationWidth: number\n  presentationHeight: number\n  aspectRatio: number\n  unscaledWidth: number\n}\n\nexport interface IImage {\n  src: string\n  width: number\n  height: number\n  format: ImageFormat\n}\n\nexport interface IGatsbyImageHelperArgs {\n  pluginName: string\n  generateImageSource: (\n    filename: string,\n    width: number,\n    height: number,\n    format: ImageFormat,\n    fit?: Fit,\n    options?: Record<string, unknown>\n  ) => IImage\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  filename: string\n  placeholderURL?: string\n  width?: number\n  height?: number\n  sizes?: string\n  reporter?: IReporter\n  sourceMetadata?: { width: number; height: number; format: ImageFormat }\n  fit?: Fit\n  options?: Record<string, unknown>\n  breakpoints?: Array<number>\n  backgroundColor?: string\n  aspectRatio?: number\n}\n\nconst warn = (message: string): void => console.warn(message)\n\nconst sortNumeric = (a: number, b: number): number => a - b\n\nexport const getSizes = (width: number, layout: Layout): string | undefined => {\n  switch (layout) {\n    // If screen is wider than the max size, image width is the max size,\n    // otherwise it's the width of the screen\n    case `constrained`:\n      return `(min-width: ${width}px) ${width}px, 100vw`\n\n    // Image is always the same width, whatever the size of the screen\n    case `fixed`:\n      return `${width}px`\n\n    // Image is always the width of the screen\n    case `fullWidth`:\n      return `100vw`\n\n    default:\n      return undefined\n  }\n}\n\nexport const getSrcSet = (images: Array<IImage>): string =>\n  images.map(image => `${image.src} ${image.width}w`).join(`,\\n`)\n\nexport function formatFromFilename(filename: string): ImageFormat | undefined {\n  const dot = filename.lastIndexOf(`.`)\n  if (dot !== -1) {\n    const ext = filename.slice(dot + 1)\n    if (ext === `jpeg`) {\n      return `jpg`\n    }\n    if (ext.length === 3 || ext.length === 4) {\n      return ext as ImageFormat\n    }\n  }\n  return undefined\n}\n\nexport function setDefaultDimensions(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageHelperArgs {\n  let {\n    layout = `constrained`,\n    width,\n    height,\n    sourceMetadata,\n    breakpoints,\n    aspectRatio,\n    formats = [`auto`, `webp`],\n  } = args\n  formats = formats.map(format => format.toLowerCase() as ImageFormat)\n  layout = camelCase(layout) as Layout\n\n  if (width && height) {\n    return { ...args, formats, layout, aspectRatio: width / height }\n  }\n  if (sourceMetadata.width && sourceMetadata.height && !aspectRatio) {\n    aspectRatio = sourceMetadata.width / sourceMetadata.height\n  }\n\n  if (layout === `fullWidth`) {\n    width = width || sourceMetadata.width || breakpoints[breakpoints.length - 1]\n    height = height || Math.round(width / (aspectRatio || DEFAULT_ASPECT_RATIO))\n  } else {\n    if (!width) {\n      if (height && aspectRatio) {\n        width = height * aspectRatio\n      } else if (sourceMetadata.width) {\n        width = sourceMetadata.width\n      } else if (height) {\n        width = Math.round(height / DEFAULT_ASPECT_RATIO)\n      } else {\n        width = DEFAULT_FIXED_WIDTH\n      }\n    }\n\n    if (aspectRatio && !height) {\n      height = Math.round(width / aspectRatio)\n    } else if (!aspectRatio) {\n      aspectRatio = width / height\n    }\n  }\n  return { ...args, width, height, aspectRatio, layout, formats }\n}\n\n/**\n * Use this for getting an image for the blurred placeholder. This ensures the\n * aspect ratio and crop match the main image\n */\nexport function getLowResolutionImageURL(\n  args: IGatsbyImageHelperArgs,\n  width = 20\n): string {\n  args = setDefaultDimensions(args)\n  const { generateImageSource, filename, aspectRatio } = args\n  return generateImageSource(\n    filename,\n    width,\n    Math.round(width / aspectRatio),\n    args.sourceMetadata.format || `jpg`,\n    args.fit,\n    args.options\n  )?.src\n}\n\nexport function generateImageData(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageData {\n  args = setDefaultDimensions(args)\n\n  let {\n    pluginName,\n    sourceMetadata,\n    generateImageSource,\n    layout,\n    fit,\n    options,\n    width,\n    height,\n    filename,\n    reporter = { warn },\n    backgroundColor,\n    placeholderURL,\n  } = args\n\n  if (!pluginName) {\n    reporter.warn(\n      `[gatsby-plugin-image] \"generateImageData\" was not passed a plugin name`\n    )\n  }\n\n  if (typeof generateImageSource !== `function`) {\n    throw new Error(`generateImageSource must be a function`)\n  }\n\n  if (!sourceMetadata || (!sourceMetadata.width && !sourceMetadata.height)) {\n    // No metadata means we let the CDN handle max size etc, aspect ratio etc\n    sourceMetadata = {\n      width,\n      height,\n      format: sourceMetadata?.format || formatFromFilename(filename) || `auto`,\n    }\n  } else if (!sourceMetadata.format) {\n    sourceMetadata.format = formatFromFilename(filename)\n  }\n\n  const formats = new Set<ImageFormat>(args.formats)\n\n  if (formats.size === 0 || formats.has(`auto`) || formats.has(``)) {\n    formats.delete(`auto`)\n    formats.delete(``)\n    formats.add(sourceMetadata.format)\n  }\n\n  if (formats.has(`jpg`) && formats.has(`png`)) {\n    reporter.warn(\n      `[${pluginName}] Specifying both 'jpg' and 'png' formats is not supported. Using 'auto' instead`\n    )\n    if (sourceMetadata.format === `jpg`) {\n      formats.delete(`png`)\n    } else {\n      formats.delete(`jpg`)\n    }\n  }\n\n  const imageSizes = calculateImageSizes({ ...args, sourceMetadata })\n\n  const result: IGatsbyImageData[\"images\"] = {\n    sources: [],\n  }\n\n  let sizes = args.sizes\n  if (!sizes) {\n    sizes = getSizes(imageSizes.presentationWidth, layout)\n  }\n\n  formats.forEach(format => {\n    const images = imageSizes.sizes\n      .map(size => {\n        const imageSrc = generateImageSource(\n          filename,\n          size,\n          Math.round(size / imageSizes.aspectRatio),\n          format,\n          fit,\n          options\n        )\n        if (\n          !imageSrc?.width ||\n          !imageSrc.height ||\n          !imageSrc.src ||\n          !imageSrc.format\n        ) {\n          reporter.warn(\n            `[${pluginName}] The resolver for image ${filename} returned an invalid value.`\n          )\n          return undefined\n        }\n        return imageSrc\n      })\n      .filter(Boolean)\n\n    if (format === `jpg` || format === `png` || format === `auto`) {\n      const unscaled =\n        images.find(img => img.width === imageSizes.unscaledWidth) || images[0]\n\n      if (unscaled) {\n        result.fallback = {\n          src: unscaled.src,\n          srcSet: getSrcSet(images),\n          sizes,\n        }\n      }\n    } else {\n      result.sources?.push({\n        srcSet: getSrcSet(images),\n        sizes,\n        type: `image/${format}`,\n      })\n    }\n  })\n\n  const imageProps: Partial<IGatsbyImageData> = {\n    images: result,\n    layout,\n    backgroundColor,\n  }\n\n  if (placeholderURL) {\n    imageProps.placeholder = { fallback: placeholderURL }\n  }\n\n  switch (layout) {\n    case `fixed`:\n      imageProps.width = imageSizes.presentationWidth\n      imageProps.height = imageSizes.presentationHeight\n      break\n\n    case `fullWidth`:\n      imageProps.width = 1\n      imageProps.height = 1 / imageSizes.aspectRatio\n      break\n\n    case `constrained`:\n      imageProps.width = args.width || imageSizes.presentationWidth || 1\n      imageProps.height = (imageProps.width || 1) / imageSizes.aspectRatio\n  }\n\n  return imageProps as IGatsbyImageData\n}\n\nconst dedupeAndSortDensities = (values: Array<number>): Array<number> =>\n  Array.from(new Set([1, ...values])).sort(sortNumeric)\n\nexport function calculateImageSizes(args: IImageSizeArgs): IImageSizes {\n  const {\n    width,\n    height,\n    filename,\n    layout = `constrained`,\n    sourceMetadata: imgDimensions,\n    reporter = { warn },\n    breakpoints = DEFAULT_BREAKPOINTS,\n  } = args\n\n  // check that all dimensions provided are positive\n  const userDimensions = { width, height }\n  const erroneousUserDimensions = Object.entries(userDimensions).filter(\n    ([_, size]) => typeof size === `number` && size < 1\n  )\n  if (erroneousUserDimensions.length) {\n    throw new Error(\n      `Specified dimensions for images must be positive numbers (> 0). Problem dimensions you have are ${erroneousUserDimensions\n        .map(dim => dim.join(`: `))\n        .join(`, `)}`\n    )\n  }\n\n  if (layout === `fixed`) {\n    return fixedImageSizes(args)\n  } else if (layout === `constrained`) {\n    return responsiveImageSizes(args)\n  } else if (layout === `fullWidth`) {\n    return responsiveImageSizes({ breakpoints, ...args })\n  } else {\n    reporter.warn(\n      `No valid layout was provided for the image at ${filename}. Valid image layouts are fixed, fullWidth, and constrained. Found ${layout}`\n    )\n    return {\n      sizes: [imgDimensions.width],\n      presentationWidth: imgDimensions.width,\n      presentationHeight: imgDimensions.height,\n      aspectRatio: imgDimensions.width / imgDimensions.height,\n      unscaledWidth: imgDimensions.width,\n    }\n  }\n}\nexport function fixedImageSizes({\n  filename,\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  reporter = { warn },\n}: IImageSizeArgs): IImageSizes {\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  if (!width) {\n    if (!height) {\n      width = DEFAULT_FIXED_WIDTH\n    } else {\n      width = Math.round(height * aspectRatio)\n    }\n  } else if (!height) {\n    height = Math.round(width / aspectRatio)\n  }\n\n  const originalWidth = width // will use this for presentationWidth, don't want to lose it\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n\n  // If the image is smaller than requested, warn the user that it's being processed as such\n  // print out this message with the necessary information before we overwrite it for sizing\n  if (isTopSizeOverriden) {\n    const fixedDimension = imgDimensions.width < width ? `width` : `height`\n    reporter.warn(`\nThe requested ${fixedDimension} \"${\n      fixedDimension === `width` ? width : height\n    }px\" for the image ${filename} was larger than the actual image ${fixedDimension} of ${\n      imgDimensions[fixedDimension]\n    }px. If possible, replace the current image with a larger one.`)\n\n    if (fixedDimension === `width`) {\n      width = imgDimensions.width\n      height = Math.round(width / aspectRatio)\n    } else {\n      height = imgDimensions.height\n      width = height * aspectRatio\n    }\n  }\n\n  const sizes = densities\n    .filter(size => size >= 1) // remove smaller densities because fixed images don't need them\n    .map(density => Math.round(density * (width as number)))\n    .filter(size => size <= imgDimensions.width)\n\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function responsiveImageSizes({\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  breakpoints,\n  layout,\n}: IImageSizeArgs): IImageSizes {\n  let sizes\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  // Case 1: width of height were passed in, make sure it isn't larger than the actual image\n  width = width && Math.min(width, imgDimensions.width)\n  height = height && Math.min(height, imgDimensions.height)\n\n  // Case 2: neither width or height were passed in, use default size\n  if (!width && !height) {\n    width = Math.min(DEFAULT_FLUID_WIDTH, imgDimensions.width)\n    height = width / aspectRatio\n  }\n\n  // if it still hasn't been found, calculate width from the derived height.\n  // TS isn't smart enough to realise the type for height has been narrowed here\n  if (!width) {\n    width = (height as number) * aspectRatio\n  }\n\n  const originalWidth = width\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n  if (isTopSizeOverriden) {\n    width = imgDimensions.width\n    height = imgDimensions.height\n  }\n\n  width = Math.round(width)\n\n  if (breakpoints?.length > 0) {\n    sizes = breakpoints.filter(size => size <= imgDimensions.width)\n\n    // If a larger breakpoint has been filtered-out, add the actual image width instead\n    if (\n      sizes.length < breakpoints.length &&\n      !sizes.includes(imgDimensions.width)\n    ) {\n      sizes.push(imgDimensions.width)\n    }\n  } else {\n    sizes = densities.map(density => Math.round(density * (width as number)))\n    sizes = sizes.filter(size => size <= imgDimensions.width)\n  }\n\n  // ensure that the size passed in is included in the final output\n  if (layout === `constrained` && !sizes.includes(width)) {\n    sizes.push(width)\n  }\n  sizes = sizes.sort(sortNumeric)\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function getDimensionsAndAspectRatio(\n  dimensions,\n  options\n): { width: number; height: number; aspectRatio: number } {\n  // Calculate the eventual width/height of the image.\n  const imageAspectRatio = dimensions.width / dimensions.height\n\n  let width = options.width\n  let height = options.height\n\n  switch (options.fit) {\n    case `fill`: {\n      width = options.width ? options.width : dimensions.width\n      height = options.height ? options.height : dimensions.height\n      break\n    }\n    case `inside`: {\n      const widthOption = options.width\n        ? options.width\n        : Number.MAX_SAFE_INTEGER\n      const heightOption = options.height\n        ? options.height\n        : Number.MAX_SAFE_INTEGER\n\n      width = Math.min(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.min(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n    case `outside`: {\n      const widthOption = options.width ? options.width : 0\n      const heightOption = options.height ? options.height : 0\n\n      width = Math.max(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.max(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n\n    default: {\n      if (options.width && !options.height) {\n        width = options.width\n        height = Math.round(options.width / imageAspectRatio)\n      }\n\n      if (options.height && !options.width) {\n        width = Math.round(options.height * imageAspectRatio)\n        height = options.height\n      }\n    }\n  }\n\n  return {\n    width,\n    height,\n    aspectRatio: width / height,\n  }\n}\n","/* global GATSBY___IMAGE */\nimport { generateImageData, EVERY_BREAKPOINT } from \"../image-utils\"\nimport type { CSSProperties, HTMLAttributes, ImgHTMLAttributes } from \"react\"\nimport type { Node } from \"gatsby\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { IGatsbyImageData } from \"./gatsby-image.browser\"\nimport type {\n  IGatsbyImageHelperArgs,\n  Layout,\n  IImage,\n  ImageFormat,\n} from \"../image-utils\"\n\n// Native lazy-loading support: https://addyosmani.com/blog/lazy-loading/\nexport const hasNativeLazyLoadSupport = (): boolean =>\n  typeof HTMLImageElement !== `undefined` &&\n  `loading` in HTMLImageElement.prototype\n\nexport function gatsbyImageIsInstalled(): boolean {\n  return typeof GATSBY___IMAGE !== `undefined` && GATSBY___IMAGE\n}\n\nexport type IGatsbyImageDataParent<T = never> = T & {\n  gatsbyImageData: IGatsbyImageData\n}\nexport type IGatsbyImageParent<T = never> = T & {\n  gatsbyImage: IGatsbyImageData\n}\nexport type FileNode = Partial<Node> & {\n  childImageSharp?: IGatsbyImageDataParent<Partial<Node>>\n}\n\nconst isGatsbyImageData = (\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageData | any\n): node is IGatsbyImageData =>\n  // 🦆 check for a deep prop to be sure this is a valid gatsbyImageData object\n  Boolean(node?.images?.fallback?.src)\n\nconst isGatsbyImageDataParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageDataParent<T> | any\n): node is IGatsbyImageDataParent<T> => Boolean(node?.gatsbyImageData)\n\nconst isGatsbyImageParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageParent<T> | any\n): node is IGatsbyImageParent<T> => Boolean(node?.gatsbyImage)\n\nexport type ImageDataLike =\n  | FileNode\n  | IGatsbyImageDataParent\n  | IGatsbyImageParent\n  | IGatsbyImageData\n\nexport const getImage = (\n  node: ImageDataLike | null\n): IGatsbyImageData | undefined => {\n  // This checks both for gatsbyImageData and gatsbyImage\n  if (isGatsbyImageData(node)) {\n    return node\n  }\n  // gatsbyImageData GraphQL field\n  if (isGatsbyImageDataParent(node)) {\n    return node.gatsbyImageData\n  }\n  // gatsbyImage GraphQL field for Gatsby's Image CDN service\n  if (isGatsbyImageParent(node)) {\n    return node.gatsbyImage\n  }\n  return node?.childImageSharp?.gatsbyImageData\n}\n\nexport const getSrc = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.src\n\nexport const getSrcSet = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.srcSet\n\nexport function getWrapperProps(\n  width: number,\n  height: number,\n  layout: Layout\n): Pick<HTMLAttributes<HTMLElement>, \"className\" | \"style\"> & {\n  \"data-gatsby-image-wrapper\": string\n} {\n  const wrapperStyle: CSSProperties = {}\n\n  let className = `gatsby-image-wrapper`\n\n  // If the plugin isn't installed we need to apply the styles inline\n  if (!gatsbyImageIsInstalled()) {\n    wrapperStyle.position = `relative`\n    wrapperStyle.overflow = `hidden`\n  }\n\n  if (layout === `fixed`) {\n    wrapperStyle.width = width\n    wrapperStyle.height = height\n  } else if (layout === `constrained`) {\n    if (!gatsbyImageIsInstalled()) {\n      wrapperStyle.display = `inline-block`\n      wrapperStyle.verticalAlign = `top`\n    }\n    className = `gatsby-image-wrapper gatsby-image-wrapper-constrained`\n  }\n\n  return {\n    className,\n    \"data-gatsby-image-wrapper\": ``,\n    style: wrapperStyle,\n  }\n}\n\nexport interface IUrlBuilderArgs<OptionsType> {\n  width: number\n  height: number\n  baseUrl: string\n  format: ImageFormat\n  options: OptionsType\n}\nexport interface IGetImageDataArgs<OptionsType = Record<string, unknown>> {\n  baseUrl: string\n  /**\n   * For constrained and fixed images, the size of the image element\n   */\n  width?: number\n  height?: number\n  /**\n   * If available, pass the source image width and height\n   */\n  sourceWidth?: number\n  sourceHeight?: number\n  /**\n   * If only one dimension is passed, then this will be used to calculate the other.\n   */\n  aspectRatio?: number\n  layout?: Layout\n  /**\n   * Returns a URL based on the passed arguments. Should be a pure function\n   */\n  urlBuilder: (args: IUrlBuilderArgs<OptionsType>) => string\n\n  /**\n   * Should be a data URI\n   */\n  placeholderURL?: string\n  backgroundColor?: string\n  /**\n   * Used in error messages etc\n   */\n  pluginName?: string\n\n  /**\n   * If you do not support auto-format, pass an array of image types here\n   */\n  formats?: Array<ImageFormat>\n\n  breakpoints?: Array<number>\n\n  /**\n   * Passed to the urlBuilder function\n   */\n  options?: OptionsType\n}\n\n/**\n * Use this hook to generate gatsby-plugin-image data in the browser.\n */\nexport function getImageData<OptionsType>({\n  baseUrl,\n  urlBuilder,\n  sourceWidth,\n  sourceHeight,\n  pluginName = `getImageData`,\n  formats = [`auto`],\n  breakpoints,\n  options,\n  ...props\n}: IGetImageDataArgs<OptionsType>): IGatsbyImageData {\n  if (\n    !breakpoints?.length &&\n    (props.layout === `fullWidth` || (props.layout as string) === `FULL_WIDTH`)\n  ) {\n    breakpoints = EVERY_BREAKPOINT\n  }\n  const generateImageSource = (\n    baseUrl: string,\n    width: number,\n    height?: number,\n    format?: ImageFormat\n  ): IImage => {\n    return {\n      width,\n      height,\n      format,\n      src: urlBuilder({ baseUrl, width, height, options, format }),\n    }\n  }\n\n  const sourceMetadata: IGatsbyImageHelperArgs[\"sourceMetadata\"] = {\n    width: sourceWidth,\n    height: sourceHeight,\n    format: `auto`,\n  }\n\n  const args: IGatsbyImageHelperArgs = {\n    ...props,\n    pluginName,\n    generateImageSource,\n    filename: baseUrl,\n    formats,\n    breakpoints,\n    sourceMetadata,\n  }\n  return generateImageData(args)\n}\n\nexport function getMainProps(\n  isLoading: boolean,\n  isLoaded: boolean,\n  images: IGatsbyImageData[\"images\"],\n  loading?: \"eager\" | \"lazy\",\n  style: CSSProperties = {}\n): Partial<MainImageProps> {\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      transform: `translateZ(0)`,\n      transition: `opacity 250ms linear`,\n      width: `100%`,\n      willChange: `opacity`,\n      ...style,\n    }\n  }\n\n  const result = {\n    ...images,\n    loading,\n    shouldLoad: isLoading,\n    \"data-main-image\": ``,\n    style: {\n      ...style,\n      opacity: isLoaded ? 1 : 0,\n    },\n  }\n\n  return result\n}\n\nexport type PlaceholderImageAttrs = ImgHTMLAttributes<HTMLImageElement> &\n  Pick<PlaceholderProps, \"sources\" | \"fallback\"> & {\n    \"data-placeholder-image\"?: string\n  }\n\nexport function getPlaceholderProps(\n  placeholder: PlaceholderImageAttrs | undefined,\n  isLoaded: boolean,\n  layout: Layout,\n  width?: number,\n  height?: number,\n  backgroundColor?: string,\n  objectFit?: CSSProperties[\"objectFit\"],\n  objectPosition?: CSSProperties[\"objectPosition\"]\n): PlaceholderImageAttrs {\n  const wrapperStyle: CSSProperties = {}\n\n  if (backgroundColor) {\n    wrapperStyle.backgroundColor = backgroundColor\n\n    if (layout === `fixed`) {\n      wrapperStyle.width = width\n      wrapperStyle.height = height\n      wrapperStyle.backgroundColor = backgroundColor\n      wrapperStyle.position = `relative`\n    } else if (layout === `constrained`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    } else if (layout === `fullWidth`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    }\n  }\n\n  if (objectFit) {\n    wrapperStyle.objectFit = objectFit\n  }\n\n  if (objectPosition) {\n    wrapperStyle.objectPosition = objectPosition\n  }\n  const result: PlaceholderImageAttrs = {\n    ...placeholder,\n    \"aria-hidden\": true,\n    \"data-placeholder-image\": ``,\n    style: {\n      opacity: isLoaded ? 0 : 1,\n      transition: `opacity 500ms linear`,\n      ...wrapperStyle,\n    },\n  }\n\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    result.style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      width: `100%`,\n    }\n  }\n\n  return result\n}\n\nexport interface IArtDirectedImage {\n  media: string\n  image: IGatsbyImageData\n}\n\n/**\n * Generate a Gatsby image data object with multiple, art-directed images that display at different\n * resolutions.\n *\n * @param defaultImage The image displayed when no media query matches.\n * It is also used for all other settings applied to the image, such as width, height and layout.\n * You should pass a className to the component with media queries to adjust the size of the container,\n * as this cannot be adjusted automatically.\n * @param artDirected Array of objects which each contains a `media` string which is a media query\n * such as `(min-width: 320px)`, and the image object to use when that query matches.\n */\nexport function withArtDirection(\n  defaultImage: IGatsbyImageData,\n  artDirected: Array<IArtDirectedImage>\n): IGatsbyImageData {\n  const { images, placeholder, ...props } = defaultImage\n  const output: IGatsbyImageData = {\n    ...props,\n    images: {\n      ...images,\n      sources: [],\n    },\n    placeholder: placeholder && {\n      ...placeholder,\n      sources: [],\n    },\n  }\n\n  artDirected.forEach(({ media, image }) => {\n    if (!media) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(\n          \"[gatsby-plugin-image] All art-directed images passed to must have a value set for `media`. Skipping.\"\n        )\n      }\n      return\n    }\n\n    if (\n      image.layout !== defaultImage.layout &&\n      process.env.NODE_ENV === `development`\n    ) {\n      console.warn(\n        `[gatsby-plugin-image] Mismatched image layout: expected \"${defaultImage.layout}\" but received \"${image.layout}\". All art-directed images use the same layout as the default image`\n      )\n    }\n\n    output.images.sources.push(\n      ...image.images.sources.map(source => {\n        return { ...source, media }\n      }),\n      {\n        media,\n        srcSet: image.images.fallback.srcSet,\n      }\n    )\n\n    if (!output.placeholder) {\n      return\n    }\n\n    output.placeholder.sources.push({\n      media,\n      srcSet: image.placeholder.fallback,\n    })\n  })\n  output.images.sources.push(...images.sources)\n  if (placeholder?.sources) {\n    output.placeholder?.sources.push(...placeholder.sources)\n  }\n  return output\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\nimport { Picture, SourceProps } from \"./picture\"\n\nexport type PlaceholderProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: string\n  sources?: Array<SourceProps>\n}\n\nexport const Placeholder: FunctionComponent<PlaceholderProps> =\n  function Placeholder({ fallback, ...props }) {\n    if (fallback) {\n      return (\n        <Picture\n          {...props}\n          fallback={{\n            src: fallback,\n          }}\n          aria-hidden\n          alt=\"\"\n        />\n      )\n    } else {\n      return <div {...props}></div>\n    }\n  }\n\nPlaceholder.displayName = `Placeholder`\nPlaceholder.propTypes = {\n  fallback: PropTypes.string,\n  sources: Picture.propTypes?.sources,\n  alt: function (props, propName, componentName): Error | null {\n    if (!props[propName]) {\n      return null\n    }\n\n    return new Error(\n      `Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`. Validation failed.`\n    )\n  },\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\n\nexport interface IResponsiveImageProps {\n  sizes?: string\n  srcSet: string\n}\n\nexport type SourceProps = IResponsiveImageProps &\n  (\n    | {\n        media: string\n        type?: string\n      }\n    | {\n        media?: string\n        type: string\n      }\n  )\n\ntype FallbackProps = { src: string } & Partial<IResponsiveImageProps>\n\ntype ImageProps = ImgHTMLAttributes<HTMLImageElement> & {\n  src: string\n  alt: string\n  shouldLoad: boolean\n}\n\nexport type PictureProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: FallbackProps\n  sources?: Array<SourceProps>\n  alt: string\n  shouldLoad?: boolean\n}\n\nconst Image: FunctionComponent<ImageProps> = function Image({\n  src,\n  srcSet,\n  loading,\n  alt = ``,\n  shouldLoad,\n  ...props\n}) {\n  return (\n    <img\n      {...props}\n      decoding=\"async\"\n      loading={loading}\n      src={shouldLoad ? src : undefined}\n      data-src={!shouldLoad ? src : undefined}\n      srcSet={shouldLoad ? srcSet : undefined}\n      data-srcset={!shouldLoad ? srcSet : undefined}\n      alt={alt}\n    />\n  )\n}\n\nexport const Picture: React.FC<PictureProps> = function Picture({\n  fallback,\n  sources = [],\n  shouldLoad = true,\n  ...props\n}) {\n  const sizes = props.sizes || fallback?.sizes\n  const fallbackImage = (\n    <Image {...props} {...fallback} sizes={sizes} shouldLoad={shouldLoad} />\n  )\n\n  if (!sources.length) {\n    return fallbackImage\n  }\n\n  return (\n    <picture>\n      {sources.map(({ media, srcSet, type }) => (\n        <source\n          key={`${media}-${type}-${srcSet}`}\n          type={type}\n          media={media}\n          srcSet={shouldLoad ? srcSet : undefined}\n          data-srcset={!shouldLoad ? srcSet : undefined}\n          sizes={sizes}\n        />\n      ))}\n      {fallbackImage}\n    </picture>\n  )\n}\n\nImage.propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n  sizes: PropTypes.string,\n  srcSet: PropTypes.string,\n  shouldLoad: PropTypes.bool,\n}\n\nPicture.displayName = `Picture`\nPicture.propTypes = {\n  alt: PropTypes.string.isRequired,\n  shouldLoad: PropTypes.bool,\n  fallback: PropTypes.exact({\n    src: PropTypes.string.isRequired,\n    srcSet: PropTypes.string,\n    sizes: PropTypes.string,\n  }),\n  sources: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.exact({\n        media: PropTypes.string.isRequired,\n        type: PropTypes.string,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n      PropTypes.exact({\n        media: PropTypes.string,\n        type: PropTypes.string.isRequired,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n    ])\n  ),\n}\n","import React from \"react\"\nimport { Picture, PictureProps } from \"./picture\"\n\nexport type MainImageProps = PictureProps\n\nexport const MainImage: React.FC<PictureProps> = function MainImage(props) {\n  return (\n    <>\n      <Picture {...props} />\n      <noscript>\n        <Picture {...props} shouldLoad={true} />\n      </noscript>\n    </>\n  )\n}\n\nMainImage.displayName = `MainImage`\nMainImage.propTypes = Picture.propTypes\n","import React, { Fragment, FunctionComponent, PropsWithChildren } from \"react\"\nimport terserMacro from \"../../macros/terser.macro\"\nimport { Layout } from \"../image-utils\"\n\nexport interface ILayoutWrapperProps {\n  layout: Layout\n  width: number\n  height: number\n}\n\nconst NativeScriptLoading: FunctionComponent = () => (\n  <script\n    type=\"module\"\n    dangerouslySetInnerHTML={{\n      __html: terserMacro`\nconst hasNativeLazyLoadSupport = typeof HTMLImageElement !== \"undefined\" && \"loading\" in HTMLImageElement.prototype;\nif (hasNativeLazyLoadSupport) {\n  const gatsbyImages = document.querySelectorAll('img[data-main-image]');\n  for (let mainImage of gatsbyImages) {\n    if (mainImage.dataset.src) {\n      mainImage.setAttribute('src', mainImage.dataset.src)\n      mainImage.removeAttribute('data-src')\n    }\n    if (mainImage.dataset.srcset) {\n      mainImage.setAttribute('srcset', mainImage.dataset.srcset)\n      mainImage.removeAttribute('data-srcset')\n    }\n\n    const sources = mainImage.parentNode.querySelectorAll('source[data-srcset]');\n    for (let source of sources) {\n      source.setAttribute('srcset', source.dataset.srcset)\n      source.removeAttribute('data-srcset')\n    }\n\n    if (mainImage.complete) {\n      mainImage.style.opacity = 1;\n\n      // also hide the placeholder\n      mainImage.parentNode.parentNode.querySelector('[data-placeholder-image]').style.opacity = 0;\n    }\n  }\n}\n`,\n    }}\n  />\n)\n\nexport function getSizer(\n  layout: Layout,\n  width: number,\n  height: number\n): string {\n  let sizer = ``\n  if (layout === `fullWidth`) {\n    sizer = `<div aria-hidden=\"true\" style=\"padding-top: ${\n      (height / width) * 100\n    }%;\"></div>`\n  }\n\n  if (layout === `constrained`) {\n    sizer = `<div style=\"max-width: ${width}px; display: block;\"><img alt=\"\" role=\"presentation\" aria-hidden=\"true\" src=\"data:image/svg+xml;charset=utf-8,%3Csvg%20height='${height}'%20width='${width}'%20xmlns='http://www.w3.org/2000/svg'%20version='1.1'%3E%3C/svg%3E\" style=\"max-width: 100%; display: block; position: static;\"></div>`\n  }\n\n  return sizer\n}\n\nconst Sizer: FunctionComponent<ILayoutWrapperProps> = function Sizer({\n  layout,\n  width,\n  height,\n}) {\n  if (layout === `fullWidth`) {\n    return (\n      <div aria-hidden style={{ paddingTop: `${(height / width) * 100}%` }} />\n    )\n  }\n\n  if (layout === `constrained`) {\n    return (\n      <div style={{ maxWidth: width, display: `block` }}>\n        <img\n          alt=\"\"\n          role=\"presentation\"\n          aria-hidden=\"true\"\n          src={`data:image/svg+xml;charset=utf-8,%3Csvg%20height='${height}'%20width='${width}'%20xmlns='http://www.w3.org/2000/svg'%20version='1.1'%3E%3C/svg%3E`}\n          style={{\n            maxWidth: `100%`,\n            display: `block`,\n            position: `static`,\n          }}\n        />\n      </div>\n    )\n  }\n\n  return null\n}\n\nexport const LayoutWrapper: FunctionComponent<\n  PropsWithChildren<ILayoutWrapperProps>\n> = function LayoutWrapper({ children, ...props }) {\n  return (\n    <Fragment>\n      <Sizer {...props} />\n      {children}\n\n      {SERVER ? <NativeScriptLoading /> : null}\n    </Fragment>\n  )\n}\n","import React from \"react\"\nimport { getWrapperProps, getMainProps, getPlaceholderProps } from \"./hooks\"\nimport { Placeholder } from \"./placeholder\"\nimport { MainImage, MainImageProps } from \"./main-image\"\nimport { LayoutWrapper } from \"./layout-wrapper\"\nimport PropTypes from \"prop-types\"\nimport type { FunctionComponent, WeakValidationMap } from \"react\"\nimport type { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\n\nconst removeNewLines = (str: string): string => str.replace(/\\n/g, ``)\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> =\n  function GatsbyImage({\n    as = `div`,\n    className,\n    class: preactClass,\n    style,\n    image,\n    loading = `lazy`,\n    imgClassName,\n    imgStyle,\n    backgroundColor,\n    objectFit,\n    objectPosition,\n    ...props\n  }) {\n    if (!image) {\n      console.warn(`[gatsby-plugin-image] Missing image prop`)\n      return null\n    }\n\n    if (preactClass) {\n      className = preactClass\n    }\n\n    imgStyle = {\n      objectFit,\n      objectPosition,\n      backgroundColor,\n      ...imgStyle,\n    }\n\n    const {\n      width,\n      height,\n      layout,\n      images,\n      placeholder,\n      backgroundColor: placeholderBackgroundColor,\n    } = image\n\n    const {\n      style: wStyle,\n      className: wClass,\n      ...wrapperProps\n    } = getWrapperProps(width, height, layout)\n\n    const cleanedImages: IGatsbyImageData[\"images\"] = {\n      fallback: undefined,\n      sources: [],\n    }\n    if (images.fallback) {\n      cleanedImages.fallback = {\n        ...images.fallback,\n        srcSet: images.fallback.srcSet\n          ? removeNewLines(images.fallback.srcSet)\n          : undefined,\n      }\n    }\n\n    if (images.sources) {\n      cleanedImages.sources = images.sources.map(source => {\n        return {\n          ...source,\n          srcSet: removeNewLines(source.srcSet),\n        }\n      })\n    }\n\n    return React.createElement(\n      as,\n      {\n        ...wrapperProps,\n        style: {\n          ...wStyle,\n          ...style,\n          backgroundColor,\n        },\n        className: `${wClass}${className ? ` ${className}` : ``}`,\n      },\n      <LayoutWrapper layout={layout} width={width} height={height}>\n        <Placeholder\n          {...getPlaceholderProps(\n            placeholder,\n            false,\n            layout,\n            width,\n            height,\n            placeholderBackgroundColor,\n            objectFit,\n            objectPosition\n          )}\n        />\n\n        <MainImage\n          data-gatsby-image-ssr=\"\"\n          className={imgClassName}\n          {...(props as Omit<\n            MainImageProps,\n            \"images\" | \"fallback\" | \"onError\" | \"onLoad\"\n          >)}\n          // When eager is set we want to start the isLoading state on true (we want to load the img without react)\n          {...getMainProps(\n            loading === `eager`,\n            false,\n            cleanedImages,\n            loading,\n            imgStyle\n          )}\n        />\n      </LayoutWrapper>\n    )\n  }\n\nexport const altValidator: PropTypes.Validator<string> = (\n  props: GatsbyImageProps,\n  propName,\n  componentName,\n  ...rest\n): Error | undefined => {\n  if (!props.alt && props.alt !== ``) {\n    return new Error(\n      `The \"alt\" prop is required in ${componentName}. If the image is purely presentational then pass an empty string: e.g. alt=\"\". Learn more: https://a11y-style-guide.com/style-guide/section-media.html`\n    )\n  }\n\n  return PropTypes.string(props, propName, componentName, ...rest)\n}\n\nexport const propTypes = {\n  image: PropTypes.object.isRequired,\n  alt: altValidator,\n} as WeakValidationMap<GatsbyImageProps>\n","import React, { FunctionComponent, ReactElement } from \"react\"\nimport {\n  altValidator,\n  GatsbyImage as GatsbyImageServer,\n} from \"./gatsby-image.server\"\nimport { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\nimport PropTypes from \"prop-types\"\nimport { ISharpGatsbyImageArgs } from \"../image-utils\"\n\nexport interface IStaticImageProps\n  extends Omit<GatsbyImageProps, \"image\">,\n    Omit<ISharpGatsbyImageArgs, \"backgroundColor\"> {\n  src: string\n  filename?: string\n}\n\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nexport function _getStaticImage(\n  GatsbyImage: FunctionComponent<GatsbyImageProps>\n): React.FC<IStaticImageProps & IPrivateProps> {\n  return function StaticImage({\n    src,\n    __imageData: imageData,\n    __error,\n    // We extract these because they're not meant to be passed-down to GatsbyImage\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    width,\n    height,\n    aspectRatio,\n    tracedSVGOptions,\n    placeholder,\n    formats,\n    quality,\n    transformOptions,\n    jpgOptions,\n    pngOptions,\n    webpOptions,\n    avifOptions,\n    blurredOptions,\n    breakpoints,\n    outputPixelDensities,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    ...props\n  }): ReactElement {\n    if (__error) {\n      console.warn(__error)\n    }\n\n    if (imageData) {\n      return <GatsbyImage image={imageData} {...props} />\n    }\n    console.warn(`Image not loaded`, src)\n    if (!__error && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `Please ensure that \"gatsby-plugin-image\" is included in the plugins array in gatsby-config.js, and that your version of gatsby is at least 2.24.78`\n      )\n    }\n    return null\n  }\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageServer)\n\nconst checkDimensionProps: PropTypes.Validator<number> = (\n  props: IStaticImageProps & IPrivateProps,\n  propName: keyof IStaticImageProps & IPrivateProps,\n  ...rest\n) => {\n  if (\n    props.layout === `fullWidth` &&\n    (propName === `width` || propName === `height`) &&\n    props[propName]\n  ) {\n    return new Error(\n      `\"${propName}\" ${props[propName]} may not be passed when layout is fullWidth.`\n    )\n  }\n  return PropTypes.number(props, propName, ...rest)\n}\n\nconst validLayouts = new Set([`fixed`, `fullWidth`, `constrained`])\n\nexport const propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: altValidator,\n  width: checkDimensionProps,\n  height: checkDimensionProps,\n  sizes: PropTypes.string,\n  layout: (props: IStaticImageProps & IPrivateProps): Error | undefined => {\n    if (props.layout === undefined) {\n      return undefined\n    }\n    if (validLayouts.has(props.layout)) {\n      return undefined\n    }\n\n    return new Error(\n      `Invalid value ${props.layout}\" provided for prop \"layout\". Defaulting to \"constrained\". Valid values are \"fixed\", \"fullWidth\" or \"constrained\".`\n    )\n  },\n}\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n          social {\n            twitter\n          }\n        }\n      }\n    }\n  `)\n\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\n  const author = data.site.siteMetadata?.author\n  const social = data.site.siteMetadata?.social\n\n  return (\n    <div className=\"bio\">\n      <StaticImage\n        className=\"bio-avatar\"\n        layout=\"fixed\"\n        formats={[\"auto\", \"webp\", \"avif\"]}\n        src=\"../images/profile-pic.png\"\n        width={50}\n        height={50}\n        quality={95}\n        alt=\"Profile picture\"\n      />\n      {author?.name && (\n        <p>\n          Written by <strong>{author.name}</strong> {author?.summary || null}\n          {` `}\n          <a href={`https://twitter.com/${social?.twitter || ``}`}>\n            You should follow them on Twitter\n          </a>\n        </p>\n      )}\n    </div>\n  )\n}\n\nexport default Bio\n","import * as React from \"react\"\nimport { Link } from \"gatsby\"\n\nconst Layout = ({ location, title, children }) => {\n  const rootPath = `${__PATH_PREFIX__}/`\n  const isRootPath = location.pathname === rootPath\n  let header\n\n  if (isRootPath) {\n    header = (\n      <h1 className=\"main-heading\">\n        <Link to=\"/\">{title}</Link>\n      </h1>\n    )\n  } else {\n    header = (\n      <Link className=\"header-link-home\" to=\"/\">\n        {title}\n      </Link>\n    )\n  }\n\n  return (\n    <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\n      <header className=\"global-header\">{header}</header>\n      <main>{children}</main>\n      <footer>\n        © {new Date().getFullYear()}, Built with\n        {` `}\n        <a href=\"https://www.gatsbyjs.com\">Gatsby</a>\n      </footer>\n    </div>\n  )\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Seo = ({ description, title, children }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <>\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta\n        name=\"twitter:creator\"\n        content={site.siteMetadata?.social?.twitter || ``}\n      />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\nconst BlogPostTemplate = ({\n  data: { previous, next, site, markdownRemark: post },\n  location,\n}) => {\n  const siteTitle = site.siteMetadata?.title || `Title`\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <article\n        className=\"blog-post\"\n        itemScope\n        itemType=\"http://schema.org/Article\"\n      >\n        <header>\n          <h1 itemProp=\"headline\">{post.frontmatter.title}</h1>\n          <p>{post.frontmatter.date}</p>\n        </header>\n        <section\n          dangerouslySetInnerHTML={{ __html: post.html }}\n          itemProp=\"articleBody\"\n        />\n        <hr />\n        <footer>\n          <Bio />\n        </footer>\n      </article>\n      <nav className=\"blog-post-nav\">\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous.fields.slug} rel=\"prev\">\n                ← {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields.slug} rel=\"next\">\n                {next.frontmatter.title} →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n    </Layout>\n  )\n}\n\nexport const Head = ({ data: { markdownRemark: post } }) => {\n  return (\n    <Seo\n      title={post.frontmatter.title}\n      description={post.frontmatter.description || post.excerpt}\n    />\n  )\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n      }\n    }\n    previous: markdownRemark(id: { eq: $previousPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    next: markdownRemark(id: { eq: $nextPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`\n"],"names":["DEFAULT_PIXEL_DENSITIES","DEFAULT_BREAKPOINTS","EVERY_BREAKPOINT","DEFAULT_FLUID_WIDTH","DEFAULT_FIXED_WIDTH","DEFAULT_ASPECT_RATIO","warn","message","sortNumeric","a","b","getSizes","width","layout","getSrcSet","images","map","image","src","join","formatFromFilename","filename","lastIndexOf","dot","ext","slice","length","setDefaultDimensions","args","height","sourceMetadata","breakpoints","aspectRatio","formats","format","toLowerCase","camelCase","Math","round","_extends","getLowResolutionImageURL","generateImageSource","fit","options","_generateImageSource","generateImageData","_sourceMetadata","pluginName","reporter","_args2$reporter","backgroundColor","placeholderURL","Error","Set","size","has","delete","add","imageSizes","imgDimensions","_args$reporter","_args$breakpoints","erroneousUserDimensions","Object","entries","filter","_","_ref","dim","_ref2","_ref2$fit","outputPixelDensities","_ref2$reporter","densities","dedupeAndSortDensities","getDimensionsAndAspectRatio","calculated","originalWidth","fixedDimension","sizes","density","presentationWidth","presentationHeight","unscaledWidth","fixedImageSizes","responsiveImageSizes","calculateImageSizes","result","sources","forEach","imageSrc","Boolean","unscaled","find","img","fallback","srcSet","_result$sources","push","type","imageProps","placeholder","values","Array","from","sort","_ref3","_ref3$fit","_ref3$outputPixelDens","min","includes","dimensions","imageAspectRatio","widthOption","Number","MAX_SAFE_INTEGER","heightOption","_widthOption","max","N","gatsbyImageIsInstalled","GATSBY___IMAGE","getImage","node","_node$images$fallback","isGatsbyImageData","gatsbyImageData","isGatsbyImageDataParent","gatsbyImage","isGatsbyImageParent","childImageSharp","getSrc","_getImage","_getImage$images","_getImage$images$fall","_getImage2$images","_getImage2","_getImage2$images$fal","getImageData","baseUrl","urlBuilder","sourceWidth","sourceHeight","props","_objectWithoutPropertiesLoose","_breakpoints","withArtDirection","defaultImage","artDirected","_output$placeholder","_output$placeholder$s","output","_excluded2","media","process","env","NODE_ENV","console","source","concat","apply","_Picture$propTypes","loading","alt","shouldLoad","React","decoding","undefined","Picture","_ref2$shouldLoad","Image","key","fallbackImage","propTypes","PropTypes","string","isRequired","bool","displayName","exact","arrayOf","oneOfType","Placeholder","createElement","propName","componentName","MainImage","NativeScriptLoading","dangerouslySetInnerHTML","__html","Sizer","style","paddingTop","maxWidth","display","role","position","LayoutWrapper","children","Fragment","G","V","removeNewLines","str","replace","GatsbyImage","as","className","preactClass","imgClassName","imgStyle","objectFit","objectPosition","placeholderBackgroundColor","wrapperStyle","overflow","verticalAlign","getWrapperProps","wStyle","_getWrapperProps","wClass","wrapperProps","cleanedImages","getPlaceholderProps","isLoaded","top","left","bottom","right","opacity","transition","isLoading","transform","willChange","getMainProps","_excluded","StaticImage","imageData","__imageData","__error","_getStaticImage","GatsbyImageServer","checkDimensionProps","number","validLayouts","Bio","data","author","site","siteMetadata","social","name","summary","twitter","Link","Layout","location","title","rootPath","__PATH_PREFIX__","isRootPath","pathname","header","Date","getFullYear","Seo","description","metaDescription","defaultTitle","BlogPostTemplate","previous","next","markdownRemark","post","siteTitle","frontmatter","date","html","flexWrap","justifyContent","listStyle","padding","fields","slug","Head","excerpt","pageQuery"],"sourceRoot":""}